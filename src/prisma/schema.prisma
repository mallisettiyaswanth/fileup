generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  storageUsed       BigInt  @default(0)
  storageLimit      BigInt  @default(10000000000)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  accounts              Account[]
  password              String?
  createdAt             DateTime               @default(now())
  isTwoFactorEnabled    Boolean                @default(false)
  TwoFactorConfirmation TwoFactorConfirmation?
  File                  File[]
  Trash                 Trash[]
  Share                 Share[]
  Folder                Folder[]

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verificationtokens")
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("passwordresettokens")
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("twofactortoken")
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twofactortokens")
}

model File {
  id        String   @id @default(cuid())
  name      String
  type      String
  size      Float
  createdAt DateTime
  url       String

  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isFavourite Boolean @default(false)
  Share       Share[]
  Folder      Folder? @relation(fields: [folderId], references: [id])
  folderId    String?

  @@map("files")
}

model Trash {
  id        String   @id @default(cuid())
  name      String
  type      String
  size      Float
  createdAt DateTime
  url       String
  versionId String

  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isFavourite Boolean @default(false)

  @@map("trash")
}

enum PERMISSION {
  READ
  WRITE
}

model Share {
  id         String     @id @default(cuid())
  fileId     String
  file       File       @relation(fields: [fileId], references: [id], onDelete: Cascade)
  sharedBy   String
  user       User       @relation(fields: [sharedBy], references: [id])
  sharedWith String?
  isPublic   Boolean    @default(false)
  permission PERMISSION
  createdAt  DateTime   @default(now())
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  parentId  String?
  parent    Folder?  @relation("FolderToFolder", fields: [parentId], references: [id])
  children  Folder[] @relation("FolderToFolder")
  files     File[]
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
